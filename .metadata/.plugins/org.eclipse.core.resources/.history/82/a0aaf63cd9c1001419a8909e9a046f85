package com.example.silentswitch;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.text.Editable;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TextView;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

public class Map_Screen extends ActionBarActivity implements LocationListener {

	private GoogleMap googleMap;
	Boolean _isInternetPresent = false;
	ConnectionDetector _cd;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_map);

		_cd = new ConnectionDetector(getApplicationContext());
		_isInternetPresent = _cd.isConnectingToInternet();

		
		connectionCheck();
		setMarker();
		

	}

	// -----------------------------------------------------------------------------
	// End of OnCreate... Methods
	
	
	
	
	
	
	@SuppressWarnings("deprecation")
	public void connectionCheck() {

		if (_isInternetPresent) {
			mapOptions();
			
		} else {
			mapOptions();
			AlertDialog alertDialog = new AlertDialog.Builder(this).create();
			alertDialog.setTitle("WARNING");
			alertDialog
					.setMessage("Map Couldn't Load Please Check YOur Connection");
			alertDialog.setButton("OK", new DialogInterface.OnClickListener() {
				public void onClick(final DialogInterface dialog,
						final int which) {
					// TODO Add your code for the button here.
				}
			});
			// Set the Icon for the Dialog

			alertDialog.show();

		}
	}

	public void mapOptions() {

		// Getting Google Play availability status
		int status = GooglePlayServicesUtil
				.isGooglePlayServicesAvailable(getBaseContext());

		// Showing status
		if (status != ConnectionResult.SUCCESS) { // Google Play Services are
													// not available

			int requestCode = 10;
			Dialog dialog = GooglePlayServicesUtil.getErrorDialog(status, this,
					requestCode);
			dialog.show();

		} else { // Google Play Services are available

			// Getting reference to the SupportMapFragment of activity_main.xml
			SupportMapFragment fm = (SupportMapFragment) getSupportFragmentManager()
					.findFragmentById(R.id.map);

			// Getting GoogleMap object from the fragment
			googleMap = fm.getMap();
			googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);

			// Enabling MyLocation Layer of Google Map
			googleMap.setMyLocationEnabled(true);

			// Getting LocationManager object from System Service
			// LOCATION_SERVICE
			LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);

			// Creating a criteria object to retrieve provider
			Criteria criteria = new Criteria();

			// Getting the name of the best provider
			String provider = locationManager.getBestProvider(criteria, true);

			// Getting Current Location
			Location location = locationManager.getLastKnownLocation(provider);

			if (location != null) {
				onLocationChanged(location);

			}
			// display map in different types depending on choice of user
			locationManager.requestLocationUpdates(provider, 20000, 0, this);
			RadioGroup rgViews = (RadioGroup) findViewById(R.id.rg_views);

			rgViews.setOnCheckedChangeListener(new OnCheckedChangeListener() {

				@Override
				public void onCheckedChanged(RadioGroup group, int checkedId) {
					// display Map on normal type
					if (checkedId == R.id.rb_normal) {
						googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
					}
					// Display in satellite type to be able to identify
					// buildings
					else if (checkedId == R.id.rb_satellite) {
						googleMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
					}
					// Display map in terrain type
					else if (checkedId == R.id.rb_terrain) {
						googleMap.setMapType(GoogleMap.MAP_TYPE_TERRAIN);
					}
				}
			});

		}
	}

	public void setMarker() {
		
		
		// Use to set markers on the map by clicking the map
		googleMap.setOnMapClickListener(new OnMapClickListener() {

			

			@Override
			public void onMapClick (LatLng latLng) {
				// TODO Auto-generated method stub
				MarkerOptions markerOptions = new MarkerOptions();

				markerOptions.position(latLng);
				// Display marker coordinations
				markerOptions.title(latLng.latitude + " : " + latLng.longitude);

				googleMap.clear();
				// Animating to the touched position
				googleMap.animateCamera(CameraUpdateFactory.newLatLng(latLng));
				googleMap.addMarker(markerOptions);
			}

		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.map__screen, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		TextView tvLocation = (TextView) findViewById(R.id.tv_location);

		// Getting latitude of the current location
		double latitude = location.getLatitude();

		// Getting longitude of the current location
		double longitude = location.getLongitude();

		// Creating a LatLng object for the current location
		LatLng latLng = new LatLng(latitude, longitude);

		// Showing the current location in Google Map
		googleMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));

		// Zoom in the Google Map
		googleMap.animateCamera(CameraUpdateFactory.zoomTo(15));

		// Setting latitude and longitude in the TextView tv_location
		tvLocation.setText("Latitude:" + latitude + ", Longitude:" + longitude);
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderDisabled(String provider) {

	}
	public void msgAlert(LatLng ltn){
		
		onMapClick(latLng);
		// new thing 
		AlertDialog.Builder alert = new AlertDialog.Builder(this);

		alert.setTitle("Title");
		alert.setMessage("Message");

		// Set an EditText view to get user input 
		final EditText input = new EditText(this);
		alert.setView(input);

		alert.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
		public void onClick(DialogInterface dialog, int whichButton) {
		  Editable value = input.getText();
		  
		  }
		});

		alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
		  public void onClick(DialogInterface dialog, int whichButton) {
		    // Canceled.
		  }
		});

		alert.show();

	}
	

}
